name: CodeCoverage

on:
  push:
    branches-ignore:
      - 'fuzz/**'
      - 'dependabot/**'
  pull_request:

concurrency:
  group: ci-${{ github.head_ref || github.run_number }}-${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  linux:
    runs-on: ubuntu-20.04
    env:
      LLVM_VERSION: "15"
      LLVM_PROFILE_FILE: "profile-%p.profraw"
      CMAKE_BUILD_PARALLEL_LEVEL: "2"
      CTEST_PARALLEL_LEVEL: "2"
      CTEST_OUTPUT_ON_FAILURE: "ON"

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install cmake
        uses: lukka/get-cmake@v3.23.0

      - name: Install tools
        run: external/Phi/scripts/ci/InstallTools.sh clang-${{ env.LLVM_VERSION }}

      - name: Build coverage data
        run: |
          # Create build directory
          mkdir build
          cd build

          # Build it
          cmake -DCMAKE_BUILD_TYPE=Debug -DPHI_COVERAGE_BUILD=ON ..
          cmake --build . --clean-first

          # Generate coverage data
          ctest . -C Debug

      - name: Process coverage data
        run: |
          cd build

          files=$(find OpenAutoItParser -iname "*.hpp" -or -iname "*.cpp" -printf "%p ")

          llvm-profdata-${{ env.LLVM_VERSION }} merge -sparse $(find . -iname "*.profraw" -type f) -o coverage.profdata
          find bin -type f -exec bash -c 'llvm-cov-${{ env.LLVM_VERSION }} show ${0} $files -instr-profile=coverage.profdata -show-expansions -show-regions -show-line-counts -use-color=false >> coverage.info' {} \;

          # List coverage data
          find bin -type f -exec bash -c 'echo ${0}; llvm-cov-${{ env.LLVM_VERSION }} report ${0} $files -instr-profile=coverage.profdata' {} \;
          cat coverage.info

      - name: Upload coverage data
        uses: codecov/codecov-action@v3.1.0
        with:
          file: ./build/coverage.info
          name: ${{ runner.os }}-clang++-${{ env.LLVM_VERSION }}
          fail_ci_if_error: true
