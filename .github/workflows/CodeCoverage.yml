name: CodeCoverage

on:
  push:
    paths:
      # Workflow file itself
      - '.github/workflows/Linux.yml'
      # C++ files
      - '**.cpp'
      - '**.hpp'
      # CMake files
      - '**.cmake'
      - '**.txt'
      # Script files
      - '**.sh'
      # external libraries
      - 'external/**'
    tags:
    branches-ignore:
      - 'dependabot/**'
  pull_request:
    branches:
      - main
      - develop
  release:
    types: [published]
  workflow_dispatch:

concurrency:
  group: ci-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  linux:
    runs-on: ubuntu-20.04
    env:
      LLVM_VERSION: "15"
      LLVM_PROFILE_FILE: "profile-%p.profraw"
      CMAKE_BUILD_PARALLEL_LEVEL: "2"
      CTEST_PARALLEL_LEVEL: "2"
      CTEST_OUTPUT_ON_FAILURE: "ON"

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup Environment
        run: external/Phi/scripts/ci/SetupEnvironment.sh

      - name: Install cmake
        uses: lukka/get-cmake@v3.23.0

      - name: Install tools
        run: external/Phi/scripts/ci/InstallTools.sh clang-${{ env.LLVM_VERSION }} gcovr

      - name: Build coverage data
        run: |
          # Create build directory
          mkdir build
          cd build

          # Build it
          cmake -DCMAKE_BUILD_TYPE=Debug -DOA_COVERAGE_BUILD=ON ..
          cmake --build . --clean-first

          # Generate coverage data
          ctest . -C Debug

      - name: Process coverage data
        working-directory: ./build
        run: gcovr -j $PROC_COUNT --delete --root ../ --print-summary --xml-pretty --xml coverage.xml . --gcov-executable '$GCOV_EXECUTABLE'

      - name: Upload coverage data
        uses: codecov/codecov-action@v3.1.0
        with:
          file: ./build/coverage.xml
          name: ${{ runner.os }}-clang++-${{ env.LLVM_VERSION }}
          fail_ci_if_error: true
