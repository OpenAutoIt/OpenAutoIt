name: Linux

on:
  push:
    paths:
      # Workflow file itself
      - '.github/workflows/Linux.yml'
      # C++ files
      - '**.cpp'
      - '**.hpp'
      # CMake files
      - '**.cmake'
      - '**.txt'
      # Script files
      - '**.sh'
      # external libraries
      - 'external/**'
    tags:
    branches-ignore:
      - 'dependabot/**'
  pull_request:
    branches:
      - main
      - develop
  release:
    types: [published]
  workflow_dispatch:

concurrency:
  group: ci-${{ github.head_ref || github.run_number }}-${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  Build:
    runs-on: ubuntu-22.04

    strategy:
      fail-fast: false

      matrix:
        compiler:
          - "gcc-13"
          - "clang-18"

        build_type:
          - "Debug"
          - "RelWithDebInfo"
          - "Release"

        dynamic_test:
          - "none"
          - "coverage"
          - "asan"
          - "lsan"
          - "tsan"
          - "ubsan"

        exclude:
        - compiler: "clang-18"
          dynamic_test: "coverage"


    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Environment
        run: external/Phi/scripts/ci/SetupEnvironment.sh

      - name: Install compiler
        run: external/Phi/scripts/ci/InstallTools.sh ${{ matrix.compiler }} ninja

      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ runner.os }}-${{ matrix.compiler }}

      - name: Install gcovr
        if: ${{ matrix.dynamic_test == 'coverage' }}
        run: external/Phi/scripts/ci/InstallTools.sh gcovr

      - name: Configure build directory
        run: |
          mkdir build -p
          cd build

          cmake .. \
            -DCMAKE_BUILD_TYPE:STRING=${{ matrix.build_type }} \
            -DOA_COVERAGE_BUILD:BOOL=${{ matrix.dynamic_test == 'coverage' }} \
            -DOA_ENABLE_SANITIZER_ADDRESS:BOOL=${{ matrix.dynamic_test == 'asan' }} \
            -DOA_ENABLE_SANITIZER_LEAK:BOOL=${{ matrix.dynamic_test == 'lsan' }} \
            -DOA_ENABLE_SANITIZER_THREAD:BOOL=${{ matrix.dynamic_test == 'tsan' }} \
            -DOA_ENABLE_SANITIZER_UNDEFINED:BOOL=${{ matrix.dynamic_test == 'ubsan' }}

      - name: Build
        working-directory: ./build
        run: cmake --build . --config ${{ matrix.build_type }}

      - name: Run tests
        working-directory: ./build
        run: ctest . -C ${{ matrix.build_type }}

      - name: Process coverage data
        working-directory: ./build
        if: ${{ matrix.dynamic_test == 'coverage' }}
        run: gcovr -j ${PROC_COUNT} --delete --root ../ --print-summary --exclude-unreachable-branches --exclude-function-lines --xml-pretty --xml coverage.xml . --gcov-executable "${GCOV_EXECUTABLE}" --exclude-lines-by-pattern "^\s*{$" --exclude-lines-by-pattern "^\s*}$" --exclude-directories "external"

      - name: Upload coverage data
        if: ${{ matrix.dynamic_test == 'coverage' }}
        uses: codecov/codecov-action@v5.0.2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./build/coverage.xml
          flags: ${{ runner.os }},${{ matrix.compiler }},${{ matrix.build_type }}
          name: ${{ runner.os }}-${{ matrix.compiler }}-${{ matrix.build_type }}
          fail_ci_if_error: true
