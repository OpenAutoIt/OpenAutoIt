name: StaticAnalysis

on:
  push:
    branches-ignore:
      - 'fuzz/**'
      - 'dependabot/**'
  pull_request:

concurrency:
  group: ci-${{ github.head_ref || github.run_number }}-${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  cppcheck:
    runs-on: ubuntu-20.04
    env:
      LLVM_VERSION: 15

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 2

      - uses: reviewdog/action-setup@v1.0.3
        with:
          reviewdog_version: latest

      - name: Install dependencies
        run: |
          sudo apt-get update -m
          sudo apt-get install xorg-dev libglu1-mesa-dev libxrandr-dev

      - name: Install cmake
        uses: lukka/get-cmake@v3.23.0

      - name: Install clang
        run: external/Phi/scripts/ci/InstallTools.sh clang-${{ env.LLVM_VERSION }}

      - name: Install cppcheck
        env:
          CPPCHECK_VERSION: "2.6"
        run: |
          mkdir cppcheck
          wget --no-check-certificate -O - "https://github.com/danmar/cppcheck/archive/${CPPCHECK_VERSION}.tar.gz" | tar --strip-components=1 -xz -C cppcheck

          # Build CppCheck
          cd cppcheck

          mkdir build
          cd build

          cmake .. -DCMAKE_BUILD_TYPE=Release -DUSE_MATCHCOMPILER=ON
          cmake --build . -j2

          # Install CppCheck
          sudo make install

      - name: Configure
        run: |
          # Create build directory
          mkdir build
          cd build

          # Generate compile_commands.json
          cmake .. -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

      - name: Run cppcheck
        run: |
          cppcheck --project=build/compile_commands.json --enable=all --inconclusive --force --inline-suppr --max-ctu-depth=25 --template='{file}:{line}:{column}: {severity}: {message} [{id}](CWE {cwe})' -DPHI_CONFIG_ALWAYS_INLINE_OVERWRITE=inline -DPHI_CONFIG_NEVER_INLINE_OVERWRITE="" --suppress=missingInclude --suppress=unusedFunction --suppress=unmatchedSuppression -i external 2> cppcheck.log

      - name: Print results
        run: cat cppcheck.log

      - name: ReviewDog check
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cat cppcheck.log | reviewdog -efm="%f:%l:%c: %m" -diff="git diff FETCH_HEAD" -reporter=github-check -name CppCheck -level warning

  clang-tidy:
    runs-on: ubuntu-20.04
    env:
      LLVM_VERSION: 15

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 2

      - uses: reviewdog/action-setup@v1.0.3
        with:
          reviewdog_version: latest

      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install cmake
        uses: lukka/get-cmake@v3.23.0

      - name: Install clang tidy
        run: external/Phi/scripts/ci/InstallTools.sh clang-tidy-${{ env.LLVM_VERSION }}

      - name: Run clang-tidy
        run: |
          # Create build directory
          mkdir build
          cd build

          # Generate compile_commands.json
          cmake .. -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

          # Run clang-tidy
          run-clang-tidy-${{ env.LLVM_VERSION }} -quiet -header-filter ".*" > clang_tidy.log

          # Filter out external libraries and test code
          cat clang_tidy.log | grep -Ev "OpenAutoIt/external|tests" > clang_tidy_filtered.log || true

          # Remove duplicate entries
          sort clang_tidy_filtered.log | uniq -d > clang_tidy_output.log

      - name: Print results
        run: cat build/clang_tidy_output.log

      - name: ReviewDog check
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cat build/clang_tidy_output.log | reviewdog -efm="%f:%l:%c: warning: %m" -diff="git diff FETCH_HEAD" -reporter=github-check -name Clang-Tidy -level warning

  include-what-you-use:
    runs-on: ubuntu-20.04
    env:
      LLVM_VERSION: 14
      CMAKE_BUILD_PARALLEL_LEVEL: "2"

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 2

      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - uses: reviewdog/action-setup@v1.0.3
        with:
          reviewdog_version: latest

      - name: Install cmake
        uses: lukka/get-cmake@v3.23.0

      - name: Install Include-What-You-Use
        run: external/Phi/scripts/ci/InstallTools.sh iwyu-${{ env.LLVM_VERSION }} ninja

      - name: Verify installation
        run: |
          iwyu_tool.py --help
          include-what-you-use --version

      - name: Run Include-What-You-Use
        run: |
          # Create build directory
          mkdir build
          cd build

          # Configure
          cmake .. -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

          # Run include-what-you-use
          iwyu_tool.py -p . -o clang -- -Xiwyu --cxx17ns | tee iwyu.log || true

          # Filter out correct includes and generated code
          cat iwyu.log | grep -Ev "#includes/fwd-decls are correct" | tee iwyu_filtered.log || true

      - name: Print results
        run: cat build/iwyu_filtered.log

      - name: ReviewDog check
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cat build/iwyu_filtered.log | reviewdog -efm="%Z%A%f:%l:%c: error: %m" -efm="%C%m" -diff="git diff FETCH_HEAD" -reporter=github-check -name include-what-you-use -level warning

  cmake-lint:
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - uses: reviewdog/action-setup@v1.0.3
        with:
          reviewdog_version: latest

      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install cmake-lint
        run: |
          sudo -H pip3 install --upgrade pip
          sudo -H pip3 install cmake-format

      - name: Run cmake-lint
        run: |
          cmake-lint $(find -iregex "./.*\.cmake" -or -iregex "./.*\CMakeLists\.txt") -c ".cmake-format.yaml" --suppress-decorations --outfile-path cmake_lint.log || true

      - name: Print results
        run: cat cmake_lint.log

      - name: ReviewDog check
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cat cmake_lint.log | reviewdog -efm="%f:%l: %m" -diff="git diff FETCH_HEAD" -reporter=github-check -name cmake-lint -level warning
